#include <stdio.h>
#include <esp_wifi.h>
#include <esp_event.h>
#include <esp_log.h>
#include <nvs_flash.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include <driver/gpio.h>
#include <homekit/homekit.h>
#include <homekit/characteristics.h>
#include <math.h>

// WiFi setup
void on_wifi_ready();

static void event_handler(void *arg, esp_event_base_t event_base, int32_t event_id, void *event_data) {
    if (event_base == WIFI_EVENT && (event_id == WIFI_EVENT_STA_START || event_id == WIFI_EVENT_STA_DISCONNECTED)) {
        ESP_LOGI("WIFI_EVENT", "STA start");
        esp_wifi_connect();
    } else if (event_base == IP_EVENT && event_id == IP_EVENT_STA_GOT_IP) {
        ESP_LOGI("IP_EVENT", "WiFI ready");
        on_wifi_ready();
    }
}

static void wifi_init() {
    ESP_ERROR_CHECK(esp_netif_init());
    ESP_ERROR_CHECK(esp_event_loop_create_default());
    esp_netif_create_default_wifi_sta();

    ESP_ERROR_CHECK(esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, &event_handler, NULL));
    ESP_ERROR_CHECK(esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, &event_handler, NULL));

    wifi_init_config_t wifi_init_config = WIFI_INIT_CONFIG_DEFAULT();
    ESP_ERROR_CHECK(esp_wifi_init(&wifi_init_config));
    ESP_ERROR_CHECK(esp_wifi_set_storage(WIFI_STORAGE_RAM));

    wifi_config_t wifi_config = {
        .sta = {
            .ssid = CONFIG_ESP_WIFI_SSID,
            .password = CONFIG_ESP_WIFI_PASSWORD,
        },
    };

    ESP_ERROR_CHECK(esp_wifi_set_mode(WIFI_MODE_STA));
    ESP_ERROR_CHECK(esp_wifi_set_config(ESP_IF_WIFI_STA, &wifi_config));
    ESP_ERROR_CHECK(esp_wifi_start());
}

// RGB LED control
#define RED_GPIO   23
#define GREEN_GPIO 22
#define BLUE_GPIO  21

typedef struct {
    uint8_t red;
    uint8_t green;
    uint8_t blue;
} rgb_color_t;

rgb_color_t rgb_color = {0, 0, 0}; // Initialize to off

void rgb_write(rgb_color_t color) {
    gpio_set_level(RED_GPIO, color.red);
    gpio_set_level(GREEN_GPIO, color.green);
    gpio_set_level(BLUE_GPIO, color.blue);

    // Ensure GPIO pins are low when LED is off
    if (color.red == 0 && color.green == 0 && color.blue == 0) {
        gpio_set_level(RED_GPIO, 0);
        gpio_set_level(GREEN_GPIO, 0);
        gpio_set_level(BLUE_GPIO, 0);
    }
}

// Convert HSV to RGB
void hsv_to_rgb(float h, float s, float v, rgb_color_t *rgb) {
    int i;
    float f, p, q, t;

    if (s == 0) {
        // achromatic (grey)
        rgb->red = rgb->green = rgb->blue = v * 255;
        return;
    }

    h /= 60;        // sector 0 to 5
    i = floor(h);
    f = h - i;      // factorial part of h
    p = v * (1 - s);
    q = v * (1 - s * f);
    t = v * (1 - s * (1 - f));

    switch(i) {
        case 0:
            rgb->red = v * 255;
            rgb->green = t * 255;
            rgb->blue = p * 255;
            break;
        case 1:
            rgb->red = q * 255;
            rgb->green = v * 255;
            rgb->blue = p * 255;
            break;
        case 2:
            rgb->red = p * 255;
            rgb->green = v * 255;
            rgb->blue = t * 255;
            break;
        case 3:
            rgb->red = p * 255;
            rgb->green = q * 255;
            rgb->blue = v * 255;
            break;
        case 4:
            rgb->red = t * 255;
            rgb->green = p * 255;
            rgb->blue = v * 255;
            break;
        default:        // case 5:
            rgb->red = v * 255;
            rgb->green = p * 255;
            rgb->blue = q * 255;
            break;
    }
}

// All GPIO Settings
void gpio_init() {
    gpio_set_direction(RED_GPIO, GPIO_MODE_OUTPUT);
    gpio_set_direction(GREEN_GPIO, GPIO_MODE_OUTPUT);
    gpio_set_direction(BLUE_GPIO, GPIO_MODE_OUTPUT);
    rgb_write(rgb_color);
}

// Accessory identification and LED control
void accessory_identify_task(void *args) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 2; j++) {
            rgb_write((rgb_color_t){255, 255, 255}); // Flash white
            vTaskDelay(pdMS_TO_TICKS(100));
            rgb_write((rgb_color_t){0, 0, 0}); // Turn off
            vTaskDelay(pdMS_TO_TICKS(100));
        }
        vTaskDelay(pdMS_TO_TICKS(250));
    }
    rgb_write(rgb_color); // Restore original color
    vTaskDelete(NULL);
}

void accessory_identify(homekit_value_t _value) {
    xTaskCreate(accessory_identify_task, "Accessory identify", 2048, NULL, 2, NULL);
}

homekit_value_t rgb_color_get() {
    return HOMEKIT_UINT8(rgb_color.red);
}

void rgb_color_set(homekit_value_t value) {
    if (value.format != homekit_format_uint8) {
        ESP_LOGE("rgb_color_set", "Invalid value format: %d", value.format);
        return;
    }
    rgb_color.red = value.int_value;
    hsv_to_rgb(rgb_color.red, 100, 100, &rgb_color);
    rgb_write(rgb_color);
}

homekit_value_t brightness_get() {
    return HOMEKIT_UINT8(rgb_color.red);
}

void brightness_set(homekit_value_t value) {
    if (value.format != homekit_format_uint8) {
        ESP_LOGE("brightness_set", "Invalid value format: %d", value.format);
        return;
    }
    rgb_color.red = value.int_value;
    hsv_to_rgb(rgb_color.red, 100, 100, &rgb_color);
    rgb_write(rgb_color);
}

homekit_value_t hue_get() {
    return HOMEKIT_UINT8(rgb_color.red);
}

void hue_set(homekit_value_t value) {
    if (value.format != homekit_format_float) {
        ESP_LOGE("hue_set", "Invalid value format: %d", value.format);
        return;
    }
    float hue = value.float_value;
    rgb_color.red = hue;
    hsv_to_rgb(hue, 100, 100, &rgb_color);
    rgb_write(rgb_color);
}

homekit_value_t saturation_get() {
    return HOMEKIT_UINT8(rgb_color.red);
}

void saturation_set(homekit_value_t value) {
    if (value.format != homekit_format_float) {
        ESP_LOGE("saturation_set", "Invalid value format: %d", value.format);
        return;
    }
    float saturation = value.float_value;
    rgb_color.red = saturation;
    hsv_to_rgb(saturation, 100, 100, &rgb_color);
    rgb_write(rgb_color);
}


// HomeKit characteristics
#define DEVICE_NAME "HomeKit RGB LED"
#define DEVICE_MANUFACTURER "StudioPietersÂ®"
#define DEVICE_SERIAL "NLDA4SQN1466"
#define DEVICE_MODEL "SD466NL/A"
#define FW_VERSION "0.0.1"

homekit_characteristic_t name = HOMEKIT_CHARACTERISTIC_(NAME, DEVICE_NAME);
homekit_characteristic_t manufacturer = HOMEKIT_CHARACTERISTIC_(MANUFACTURER,  DEVICE_MANUFACTURER);
homekit_characteristic_t serial = HOMEKIT_CHARACTERISTIC_(SERIAL_NUMBER, DEVICE_SERIAL);
homekit_characteristic_t model = HOMEKIT_CHARACTERISTIC_(MODEL, DEVICE_MODEL);
homekit_characteristic_t revision = HOMEKIT_CHARACTERISTIC_(FIRMWARE_REVISION, FW_VERSION);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverride-init"
homekit_accessory_t *accessories[] = {
    HOMEKIT_ACCESSORY(.id = 1, .category = homekit_accessory_category_lighting, .services = (homekit_service_t*[]) {
        HOMEKIT_SERVICE(ACCESSORY_INFORMATION, .characteristics = (homekit_characteristic_t*[]) {
            &name,
            &manufacturer,
            &serial,
            &model,
            &revision,
            HOMEKIT_CHARACTERISTIC(IDENTIFY, accessory_identify),
            NULL
        }),
        HOMEKIT_SERVICE(LIGHTBULB, .primary = true, .characteristics = (homekit_characteristic_t*[]) {
            HOMEKIT_CHARACTERISTIC(NAME, "HomeKit RGB LED"),
            HOMEKIT_CHARACTERISTIC(ON, false),
            HOMEKIT_CHARACTERISTIC(BRIGHTNESS, 100, .setter = brightness_set),
            HOMEKIT_CHARACTERISTIC(HUE, 0, .setter = hue_set),
            HOMEKIT_CHARACTERISTIC(SATURATION, 100, .setter = saturation_set),
            NULL
        }),
        NULL
    }),
    NULL
};
#pragma GCC diagnostic pop

homekit_server_config_t config = {
    .accessories = accessories,
    .password = CONFIG_ESP_SETUP_CODE,
    .setupId = CONFIG_ESP_SETUP_ID,
};

void on_wifi_ready() {
    homekit_server_init(&config);
}

void app_main(void) {
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ret = nvs_flash_init();
    }
    ESP_ERROR_CHECK(ret);

    wifi_init();
    gpio_init();
}
